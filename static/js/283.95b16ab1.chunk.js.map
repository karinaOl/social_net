{"version":3,"file":"static/js/283.95b16ab1.chunk.js","mappings":"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","sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://project_typescript/./src/components/Profile/MyPost/MyPost.module.css?5bea","webpack://project_typescript/./src/components/Profile/MyPost/Post/Post.module.css?5715","components/Profile/MyPost/Post/Post.tsx","components/Profile/MyPost/AddNewPostForm/AddNewPostForm.tsx","components/Profile/MyPost/MyPosts.tsx","components/Profile/MyPost/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__IUlWL\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateUserStatus: (newStatus: string) => void\r\n};\r\n\r\nexport const ProfileStatus = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        const status = props.status ? props.status : \"------\";\r\n        setStatus(status);\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>\r\n                    {status || \"------\"}\r\n                </span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input value={status} onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport classes from \"./ProfileInfo.module.css\";\r\nimport {ProfileType} from \"../../../redux/profileReducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\n\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileInfo = (props: ProfileInfoType) => {\r\n    if(!props.profile.userId){\r\n        return <Preloader/>\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div>\r\n                какая-то картинка\r\n            </div>\r\n            <div className={classes.descriptionBlock}>\r\n                <img src={props.profile.photos.large && props.profile.photos.large}/>\r\n                <ProfileStatus status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n                ava+description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPost_postBlock__lSLP5\",\"post\":\"MyPost_post__gTsli\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__HAsLE\"};","import React from \"react\";\r\nimport classes from './Post.module.css'\r\nimport {PostType} from \"../../../../redux/profileReducer\";\r\n\r\ntype PostPropsType = PostType\r\n\r\nexport const Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src={'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSqrrxsxZSpsfebkw8VLXe6R5j7mryT6PK7Pg&usqp=CAU'}/>\r\n            {props.message}\r\n            <div>\r\n                <span>{props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../common/FormsControls/FormsControls\";\r\n\r\nexport type AddNewPostFormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength = maxLengthCreator(30)\r\n\r\nexport const AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={\"newPostText\"}\r\n                       validate={[required, maxLength]}\r\n                />\r\n            </div>\r\n            <button>ADD</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddNewPostReduxForm = reduxForm<AddNewPostFormDataType>({form: \"profileAddNewPostReduxForm\"})(AddNewPostForm)\r\n\r\n","import React from \"react\";\r\nimport classes from './MyPost.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {AddNewPostFormDataType, AddNewPostReduxForm} from \"./AddNewPostForm/AddNewPostForm\";\r\n\r\n\r\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    const addNewPost = (values: AddNewPostFormDataType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postBlock}>\r\n            <h2>My post</h2>\r\n            <div>\r\n                <AddNewPostReduxForm onSubmit={addNewPost}/>\r\n            </div>\r\n            <div className={classes.post}>\r\n                {[...props.postData].reverse().map(p => <Post key={p.id} id={p.id} message={p.message}\r\n                                               likesCount={p.likesCount}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport {addPostActionCreator, PostType} from \"../../../redux/profileReducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootAppStateType} from \"../../../redux/reduxStore\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    postData: Array<PostType>\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText: string)=>void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nconst mapStateToProps = (state: RootAppStateType ) : MapStateToPropsType => {\r\n    return {\r\n        postData: state.profilePage.posts,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch) : MapDispatchToPropsType => {\r\n  return{\r\n      addPost: (newPostText: string)=>{\r\n          dispatch(addPostActionCreator(newPostText))\r\n      }\r\n  }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n\r\n","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPost/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profileReducer\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport const Profile = (props:ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootAppStateType} from \"../../redux/reduxStore\";\r\nimport {getUserProfile, getUserStatus, ProfileType, updateUserStatus} from \"../../redux/profileReducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userID: string) => void\r\n    getUserStatus: (userID: string) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userID: string\r\n}\r\n\r\ntype ProfileContainerType = RouteComponentProps<PathParamsType> & MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType>{\r\n\r\n    componentDidMount() {\r\n        let userID = this.props.match.params.userID\r\n\r\n        if(!userID){\r\n            userID = this.props.authorizedUserId!.toString();\r\n            if(!userID){\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n\r\n        if (userID) {\r\n            this.props.getUserProfile(userID);\r\n            this.props.getUserStatus(userID);\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateUserStatus={this.props.updateUserStatus}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootAppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus}),\r\n    withRouter,\r\n    withAuthRedirect,\r\n)(ProfileContainer);"],"names":["ProfileStatus","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","value","onChange","e","currentTarget","onBlur","updateUserStatus","autoFocus","ProfileInfo","profile","userId","className","classes","src","photos","large","Preloader","Post","message","likesCount","maxLength","maxLengthCreator","AddNewPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","validate","required","MyPosts","React","values","addPost","newPostText","postData","reverse","map","p","id","MyPostsContainer","connect","state","profilePage","posts","dispatch","addPostActionCreator","Profile","ProfileContainer","userID","this","match","params","authorizedUserId","toString","history","push","getUserProfile","getUserStatus","compose","auth","isAuth","withRouter","withAuthRedirect"],"sourceRoot":""}